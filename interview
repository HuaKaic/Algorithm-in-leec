// huawei test in 9.14
#include <vector>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
using namespace std;

int main () {
    int life = 1, bridge_lens = 3, lack_nums = 1;
    unordered_set<int> unset;
    unset.insert(1);
    unset.insert(3);
    vector<vector<int>> dp(bridge_lens + 2, vector<int>(2, INT_MAX));
    for (int i = 1; i < dp.size(); i++) {
        dp[i][0] = 0;
    }
    dp[0][0] = 1, dp[0][1] = life;
    for (int i = 0; i <= bridge_lens + 1; i++) {
        for (int j = 1; j <= 3; j++) {
            int next = i + j;
            if (next <= bridge_lens + 1) {
                if (unset.count(next) && dp[i][1] > 0) {
                    // 当前位置木板缺失但是还有生命值更新next位置
                    // cout << i << dp[i][0] << endl;
                    dp[next][0] += dp[i][0];
                    dp[next][1] = min(dp[next][1], dp[i][1] - 1);
                    cout << next << dp[next][1] << endl;
                } else if (!unset.count(next) && dp[i][1] > 0) {
                    dp[next][0] += dp[i][0];
                    dp[next][1] = min(dp[next][1], dp[i][1]);
                }
            }
        }
    }
    cout << "total methods: " << dp[bridge_lens + 1][0] << "cost life: " << dp[bridge_lens + 1][1];
    return 0;
}
